--- a/configure
+++ b/configure
@@ -64,11 +64,22 @@ parser.add_option('--debug',
     dest='debug',
     help='also build debug build')
 
+parser.add_option('--cross-compiling',
+    action='store_true',
+    dest='cross_compiling',
+    help='enable/force cross compiling')
+
+parser.add_option('--host-cpu',
+    action='store',
+    dest='host_cpu',
+    choices=valid_arch,
+    help='Host CPU architecture to build for ({0})'.format(', '.join(valid_arch)))
+
 parser.add_option('--dest-cpu',
     action='store',
     dest='dest_cpu',
     choices=valid_arch,
-    help='CPU architecture to build for ({0})'.format(', '.join(valid_arch)))
+    help='Target CPU architecture to build for ({0})'.format(', '.join(valid_arch)))
 
 parser.add_option('--dest-os',
     action='store',
@@ -746,20 +757,28 @@ def configure_node(o):
   o['variables']['node_install_npm'] = b(not options.without_npm)
   o['default_configuration'] = 'Debug' if options.debug else 'Release'
 
-  host_arch = host_arch_win() if os.name == 'nt' else host_arch_cc()
+  host_arch = options.host_cpu or (host_arch_win() if os.name == 'nt' else host_arch_cc())
   target_arch = options.dest_cpu or host_arch
   # ia32 is preferred by the build tools (GYP) over x86 even if we prefer the latter
   # the Makefile resets this to x86 afterward
+  if host_arch == 'x86':
+    host_arch = 'ia32'
   if target_arch == 'x86':
     target_arch = 'ia32'
   o['variables']['host_arch'] = host_arch
   o['variables']['target_arch'] = target_arch
   o['variables']['node_byteorder'] = sys.byteorder
-
-  cross_compiling = target_arch != host_arch
+  
+  cross_compiling = options.cross_compiling or (target_arch != host_arch)
   want_snapshots = not options.without_snapshot
+  if (cross_compiling and want_snapshots):
+    raise Exception(
+       'cross-compiling with a separate host and target toolset is only '
+       'possible without v8 snapshot enabled. '
+       'To fix the issue add the option: --without-snapshot')
+
   o['variables']['want_separate_host_toolset'] = int(
-      cross_compiling and want_snapshots)
+      cross_compiling and options.without_snapshot)
 
   if target_arch == 'arm':
     configure_arm(o)
